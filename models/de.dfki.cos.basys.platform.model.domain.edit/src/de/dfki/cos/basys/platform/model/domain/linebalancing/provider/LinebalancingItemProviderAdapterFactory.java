/**
 */
package de.dfki.cos.basys.platform.model.domain.linebalancing.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.dfki.cos.basys.platform.model.domain.linebalancing.util.LinebalancingAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LinebalancingItemProviderAdapterFactory extends LinebalancingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LinebalancingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WMPathTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WMPathTimeItemProvider wmPathTimeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WMPathTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWMPathTimeAdapter() {
		if (wmPathTimeItemProvider == null) {
			wmPathTimeItemProvider = new WMPathTimeItemProvider(this);
		}

		return wmPathTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.platform.model.domain.linebalancing.StaticWorldModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticWorldModelItemProvider staticWorldModelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.platform.model.domain.linebalancing.StaticWorldModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticWorldModelAdapter() {
		if (staticWorldModelItemProvider == null) {
			staticWorldModelItemProvider = new StaticWorldModelItemProvider(this);
		}

		return staticWorldModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WMProductInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WMProductInstanceItemProvider wmProductInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WMProductInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWMProductInstanceAdapter() {
		if (wmProductInstanceItemProvider == null) {
			wmProductInstanceItemProvider = new WMProductInstanceItemProvider(this);
		}

		return wmProductInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WMResourceInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WMResourceInstanceItemProvider wmResourceInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WMResourceInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWMResourceInstanceAdapter() {
		if (wmResourceInstanceItemProvider == null) {
			wmResourceInstanceItemProvider = new WMResourceInstanceItemProvider(this);
		}

		return wmResourceInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WorldModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorldModelItemProvider worldModelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WorldModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorldModelAdapter() {
		if (worldModelItemProvider == null) {
			worldModelItemProvider = new WorldModelItemProvider(this);
		}

		return worldModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WMPathTimes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WMPathTimesItemProvider wmPathTimesItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.platform.model.domain.linebalancing.WMPathTimes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWMPathTimesAdapter() {
		if (wmPathTimesItemProvider == null) {
			wmPathTimesItemProvider = new WMPathTimesItemProvider(this);
		}

		return wmPathTimesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.platform.model.domain.linebalancing.LineBalancingAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LineBalancingAssignmentItemProvider lineBalancingAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.platform.model.domain.linebalancing.LineBalancingAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLineBalancingAssignmentAdapter() {
		if (lineBalancingAssignmentItemProvider == null) {
			lineBalancingAssignmentItemProvider = new LineBalancingAssignmentItemProvider(this);
		}

		return lineBalancingAssignmentItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (wmPathTimeItemProvider != null) wmPathTimeItemProvider.dispose();
		if (staticWorldModelItemProvider != null) staticWorldModelItemProvider.dispose();
		if (wmProductInstanceItemProvider != null) wmProductInstanceItemProvider.dispose();
		if (wmResourceInstanceItemProvider != null) wmResourceInstanceItemProvider.dispose();
		if (worldModelItemProvider != null) worldModelItemProvider.dispose();
		if (wmPathTimesItemProvider != null) wmPathTimesItemProvider.dispose();
		if (lineBalancingAssignmentItemProvider != null) lineBalancingAssignmentItemProvider.dispose();
	}

}
