/**
 */
package de.dfki.iui.basys.model.domain.resourceinstance.provider;

import de.dfki.iui.basys.model.domain.resourceinstance.util.ResourceinstanceAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ResourceinstanceItemProviderAdapterFactory extends ResourceinstanceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceinstanceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resourceinstance.ResourceInstanceRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceInstanceRepositoryItemProvider resourceInstanceRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resourceinstance.ResourceInstanceRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceInstanceRepositoryAdapter() {
		if (resourceInstanceRepositoryItemProvider == null) {
			resourceInstanceRepositoryItemProvider = new ResourceInstanceRepositoryItemProvider(this);
		}

		return resourceInstanceRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resourceinstance.ResourceInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceInstanceItemProvider resourceInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resourceinstance.ResourceInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceInstanceAdapter() {
		if (resourceInstanceItemProvider == null) {
			resourceInstanceItemProvider = new ResourceInstanceItemProvider(this);
		}

		return resourceInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resourceinstance.CapabilityApplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityApplicationItemProvider capabilityApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resourceinstance.CapabilityApplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityApplicationAdapter() {
		if (capabilityApplicationItemProvider == null) {
			capabilityApplicationItemProvider = new CapabilityApplicationItemProvider(this);
		}

		return capabilityApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resourceinstance.CapabilityVariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityVariantItemProvider capabilityVariantItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resourceinstance.CapabilityVariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityVariantAdapter() {
		if (capabilityVariantItemProvider == null) {
			capabilityVariantItemProvider = new CapabilityVariantItemProvider(this);
		}

		return capabilityVariantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resourceinstance.ManufacturingCapabilityVariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManufacturingCapabilityVariantItemProvider manufacturingCapabilityVariantItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resourceinstance.ManufacturingCapabilityVariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManufacturingCapabilityVariantAdapter() {
		if (manufacturingCapabilityVariantItemProvider == null) {
			manufacturingCapabilityVariantItemProvider = new ManufacturingCapabilityVariantItemProvider(this);
		}

		return manufacturingCapabilityVariantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resourceinstance.LogisticsCapabilityVariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogisticsCapabilityVariantItemProvider logisticsCapabilityVariantItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resourceinstance.LogisticsCapabilityVariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogisticsCapabilityVariantAdapter() {
		if (logisticsCapabilityVariantItemProvider == null) {
			logisticsCapabilityVariantItemProvider = new LogisticsCapabilityVariantItemProvider(this);
		}

		return logisticsCapabilityVariantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resourceinstance.GeneralCapabilityVariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralCapabilityVariantItemProvider generalCapabilityVariantItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resourceinstance.GeneralCapabilityVariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralCapabilityVariantAdapter() {
		if (generalCapabilityVariantItemProvider == null) {
			generalCapabilityVariantItemProvider = new GeneralCapabilityVariantItemProvider(this);
		}

		return generalCapabilityVariantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resourceinstance.HandlingCapabilityVariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HandlingCapabilityVariantItemProvider handlingCapabilityVariantItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resourceinstance.HandlingCapabilityVariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHandlingCapabilityVariantAdapter() {
		if (handlingCapabilityVariantItemProvider == null) {
			handlingCapabilityVariantItemProvider = new HandlingCapabilityVariantItemProvider(this);
		}

		return handlingCapabilityVariantItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
