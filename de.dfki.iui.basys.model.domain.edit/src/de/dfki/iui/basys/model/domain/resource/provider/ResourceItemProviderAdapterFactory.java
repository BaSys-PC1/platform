/**
 */
package de.dfki.iui.basys.model.domain.resource.provider;

import de.dfki.iui.basys.model.domain.resource.util.ResourceAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ResourceItemProviderAdapterFactory extends ResourceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.ResourceTypeCatalogue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceTypeCatalogueItemProvider resourceTypeCatalogueItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.ResourceTypeCatalogue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceTypeCatalogueAdapter() {
		if (resourceTypeCatalogueItemProvider == null) {
			resourceTypeCatalogueItemProvider = new ResourceTypeCatalogueItemProvider(this);
		}

		return resourceTypeCatalogueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.ResourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceTypeItemProvider resourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.ResourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceTypeAdapter() {
		if (resourceTypeItemProvider == null) {
			resourceTypeItemProvider = new ResourceTypeItemProvider(this);
		}

		return resourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.DiscreteManufacturingEquipmentModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiscreteManufacturingEquipmentModuleItemProvider discreteManufacturingEquipmentModuleItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.DiscreteManufacturingEquipmentModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiscreteManufacturingEquipmentModuleAdapter() {
		if (discreteManufacturingEquipmentModuleItemProvider == null) {
			discreteManufacturingEquipmentModuleItemProvider = new DiscreteManufacturingEquipmentModuleItemProvider(this);
		}

		return discreteManufacturingEquipmentModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Tool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToolItemProvider toolItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Tool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToolAdapter() {
		if (toolItemProvider == null) {
			toolItemProvider = new ToolItemProvider(this);
		}

		return toolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.StationaryTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StationaryToolItemProvider stationaryToolItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.StationaryTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStationaryToolAdapter() {
		if (stationaryToolItemProvider == null) {
			stationaryToolItemProvider = new StationaryToolItemProvider(this);
		}

		return stationaryToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.MovableTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MovableToolItemProvider movableToolItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.MovableTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMovableToolAdapter() {
		if (movableToolItemProvider == null) {
			movableToolItemProvider = new MovableToolItemProvider(this);
		}

		return movableToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Transport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransportItemProvider transportItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Transport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransportAdapter() {
		if (transportItemProvider == null) {
			transportItemProvider = new TransportItemProvider(this);
		}

		return transportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Storage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageItemProvider storageItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Storage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageAdapter() {
		if (storageItemProvider == null) {
			storageItemProvider = new StorageItemProvider(this);
		}

		return storageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Fixture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixtureItemProvider fixtureItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Fixture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixtureAdapter() {
		if (fixtureItemProvider == null) {
			fixtureItemProvider = new FixtureItemProvider(this);
		}

		return fixtureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Gate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GateItemProvider gateItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Gate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGateAdapter() {
		if (gateItemProvider == null) {
			gateItemProvider = new GateItemProvider(this);
		}

		return gateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Robot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RobotItemProvider robotItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Robot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRobotAdapter() {
		if (robotItemProvider == null) {
			robotItemProvider = new RobotItemProvider(this);
		}

		return robotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Carrier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CarrierItemProvider carrierItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Carrier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCarrierAdapter() {
		if (carrierItemProvider == null) {
			carrierItemProvider = new CarrierItemProvider(this);
		}

		return carrierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Machine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MachineItemProvider machineItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Machine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachineAdapter() {
		if (machineItemProvider == null) {
			machineItemProvider = new MachineItemProvider(this);
		}

		return machineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.StaticObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticObjectItemProvider staticObjectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.StaticObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticObjectAdapter() {
		if (staticObjectItemProvider == null) {
			staticObjectItemProvider = new StaticObjectItemProvider(this);
		}

		return staticObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Turnable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TurnableItemProvider turnableItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Turnable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTurnableAdapter() {
		if (turnableItemProvider == null) {
			turnableItemProvider = new TurnableItemProvider(this);
		}

		return turnableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Conveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConveyorItemProvider conveyorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Conveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConveyorAdapter() {
		if (conveyorItemProvider == null) {
			conveyorItemProvider = new ConveyorItemProvider(this);
		}

		return conveyorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.LiftingTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiftingTableItemProvider liftingTableItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.LiftingTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiftingTableAdapter() {
		if (liftingTableItemProvider == null) {
			liftingTableItemProvider = new LiftingTableItemProvider(this);
		}

		return liftingTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.AVG} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AVGItemProvider avgItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.AVG}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAVGAdapter() {
		if (avgItemProvider == null) {
			avgItemProvider = new AVGItemProvider(this);
		}

		return avgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Transposer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransposerItemProvider transposerItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Transposer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransposerAdapter() {
		if (transposerItemProvider == null) {
			transposerItemProvider = new TransposerItemProvider(this);
		}

		return transposerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.CarrierHandlingSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CarrierHandlingSystemItemProvider carrierHandlingSystemItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.CarrierHandlingSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCarrierHandlingSystemAdapter() {
		if (carrierHandlingSystemItemProvider == null) {
			carrierHandlingSystemItemProvider = new CarrierHandlingSystemItemProvider(this);
		}

		return carrierHandlingSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Lift} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiftItemProvider liftItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Lift}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiftAdapter() {
		if (liftItemProvider == null) {
			liftItemProvider = new LiftItemProvider(this);
		}

		return liftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.VerticalTransport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerticalTransportItemProvider verticalTransportItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.VerticalTransport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerticalTransportAdapter() {
		if (verticalTransportItemProvider == null) {
			verticalTransportItemProvider = new VerticalTransportItemProvider(this);
		}

		return verticalTransportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.HorizontalTransport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalTransportItemProvider horizontalTransportItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.HorizontalTransport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalTransportAdapter() {
		if (horizontalTransportItemProvider == null) {
			horizontalTransportItemProvider = new HorizontalTransportItemProvider(this);
		}

		return horizontalTransportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Rollerbed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RollerbedItemProvider rollerbedItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Rollerbed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRollerbedAdapter() {
		if (rollerbedItemProvider == null) {
			rollerbedItemProvider = new RollerbedItemProvider(this);
		}

		return rollerbedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Loader} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoaderItemProvider loaderItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Loader}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoaderAdapter() {
		if (loaderItemProvider == null) {
			loaderItemProvider = new LoaderItemProvider(this);
		}

		return loaderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Unloader} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnloaderItemProvider unloaderItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Unloader}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnloaderAdapter() {
		if (unloaderItemProvider == null) {
			unloaderItemProvider = new UnloaderItemProvider(this);
		}

		return unloaderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.BodyStore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BodyStoreItemProvider bodyStoreItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.BodyStore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBodyStoreAdapter() {
		if (bodyStoreItemProvider == null) {
			bodyStoreItemProvider = new BodyStoreItemProvider(this);
		}

		return bodyStoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.Clamp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClampItemProvider clampItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.Clamp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClampAdapter() {
		if (clampItemProvider == null) {
			clampItemProvider = new ClampItemProvider(this);
		}

		return clampItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.BeltConveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeltConveyorItemProvider beltConveyorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.BeltConveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeltConveyorAdapter() {
		if (beltConveyorItemProvider == null) {
			beltConveyorItemProvider = new BeltConveyorItemProvider(this);
		}

		return beltConveyorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.RollConveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RollConveyorItemProvider rollConveyorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.RollConveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRollConveyorAdapter() {
		if (rollConveyorItemProvider == null) {
			rollConveyorItemProvider = new RollConveyorItemProvider(this);
		}

		return rollConveyorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.ChainConveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChainConveyorItemProvider chainConveyorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.ChainConveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChainConveyorAdapter() {
		if (chainConveyorItemProvider == null) {
			chainConveyorItemProvider = new ChainConveyorItemProvider(this);
		}

		return chainConveyorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.PalletConveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PalletConveyorItemProvider palletConveyorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.PalletConveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPalletConveyorAdapter() {
		if (palletConveyorItemProvider == null) {
			palletConveyorItemProvider = new PalletConveyorItemProvider(this);
		}

		return palletConveyorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.resource.OverheadConveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OverheadConveyorItemProvider overheadConveyorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.resource.OverheadConveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOverheadConveyorAdapter() {
		if (overheadConveyorItemProvider == null) {
			overheadConveyorItemProvider = new OverheadConveyorItemProvider(this);
		}

		return overheadConveyorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
