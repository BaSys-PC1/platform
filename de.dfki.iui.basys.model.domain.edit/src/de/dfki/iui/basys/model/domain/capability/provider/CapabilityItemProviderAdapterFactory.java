/**
 */
package de.dfki.iui.basys.model.domain.capability.provider;

import de.dfki.iui.basys.model.domain.capability.util.CapabilityAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CapabilityItemProviderAdapterFactory extends CapabilityAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CapabilityItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.CapabilityAssertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityAssertionItemProvider capabilityAssertionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.CapabilityAssertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityAssertionAdapter() {
		if (capabilityAssertionItemProvider == null) {
			capabilityAssertionItemProvider = new CapabilityAssertionItemProvider(this);
		}

		return capabilityAssertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.CapabilityRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityRequestItemProvider capabilityRequestItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.CapabilityRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityRequestAdapter() {
		if (capabilityRequestItemProvider == null) {
			capabilityRequestItemProvider = new CapabilityRequestItemProvider(this);
		}

		return capabilityRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Capability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityItemProvider capabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Capability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityAdapter() {
		if (capabilityItemProvider == null) {
			capabilityItemProvider = new CapabilityItemProvider(this);
		}

		return capabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.HandlingCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HandlingCapabilityItemProvider handlingCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.HandlingCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHandlingCapabilityAdapter() {
		if (handlingCapabilityItemProvider == null) {
			handlingCapabilityItemProvider = new HandlingCapabilityItemProvider(this);
		}

		return handlingCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.ManufacturingCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManufacturingCapabilityItemProvider manufacturingCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.ManufacturingCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManufacturingCapabilityAdapter() {
		if (manufacturingCapabilityItemProvider == null) {
			manufacturingCapabilityItemProvider = new ManufacturingCapabilityItemProvider(this);
		}

		return manufacturingCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Fügen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FügenItemProvider fügenItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Fügen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFügenAdapter() {
		if (fügenItemProvider == null) {
			fügenItemProvider = new FügenItemProvider(this);
		}

		return fügenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Pressing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PressingItemProvider pressingItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Pressing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPressingAdapter() {
		if (pressingItemProvider == null) {
			pressingItemProvider = new PressingItemProvider(this);
		}

		return pressingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.QoSCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QoSCapabilityItemProvider qoSCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.QoSCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQoSCapabilityAdapter() {
		if (qoSCapabilityItemProvider == null) {
			qoSCapabilityItemProvider = new QoSCapabilityItemProvider(this);
		}

		return qoSCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Inspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InspectItemProvider inspectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Inspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInspectAdapter() {
		if (inspectItemProvider == null) {
			inspectItemProvider = new InspectItemProvider(this);
		}

		return inspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.WorkerAssistenceCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkerAssistenceCapabilityItemProvider workerAssistenceCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.WorkerAssistenceCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkerAssistenceCapabilityAdapter() {
		if (workerAssistenceCapabilityItemProvider == null) {
			workerAssistenceCapabilityItemProvider = new WorkerAssistenceCapabilityItemProvider(this);
		}

		return workerAssistenceCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.InteractionCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteractionCapabilityItemProvider interactionCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.InteractionCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteractionCapabilityAdapter() {
		if (interactionCapabilityItemProvider == null) {
			interactionCapabilityItemProvider = new InteractionCapabilityItemProvider(this);
		}

		return interactionCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.ConfirmationCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfirmationCapabilityItemProvider confirmationCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.ConfirmationCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfirmationCapabilityAdapter() {
		if (confirmationCapabilityItemProvider == null) {
			confirmationCapabilityItemProvider = new ConfirmationCapabilityItemProvider(this);
		}

		return confirmationCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.SwitchConfirmationCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchConfirmationCapabilityItemProvider switchConfirmationCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.SwitchConfirmationCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchConfirmationCapabilityAdapter() {
		if (switchConfirmationCapabilityItemProvider == null) {
			switchConfirmationCapabilityItemProvider = new SwitchConfirmationCapabilityItemProvider(this);
		}

		return switchConfirmationCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.GeneralCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralCapabilityItemProvider generalCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.GeneralCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralCapabilityAdapter() {
		if (generalCapabilityItemProvider == null) {
			generalCapabilityItemProvider = new GeneralCapabilityItemProvider(this);
		}

		return generalCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.MoveToLocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveToLocationItemProvider moveToLocationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.MoveToLocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveToLocationAdapter() {
		if (moveToLocationItemProvider == null) {
			moveToLocationItemProvider = new MoveToLocationItemProvider(this);
		}

		return moveToLocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.ProjectPath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectPathItemProvider projectPathItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.ProjectPath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectPathAdapter() {
		if (projectPathItemProvider == null) {
			projectPathItemProvider = new ProjectPathItemProvider(this);
		}

		return projectPathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.ProjectETA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectETAItemProvider projectETAItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.ProjectETA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectETAAdapter() {
		if (projectETAItemProvider == null) {
			projectETAItemProvider = new ProjectETAItemProvider(this);
		}

		return projectETAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.VisualisationCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisualisationCapabilityItemProvider visualisationCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.VisualisationCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisualisationCapabilityAdapter() {
		if (visualisationCapabilityItemProvider == null) {
			visualisationCapabilityItemProvider = new VisualisationCapabilityItemProvider(this);
		}

		return visualisationCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.QAVisualisationCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QAVisualisationCapabilityItemProvider qaVisualisationCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.QAVisualisationCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQAVisualisationCapabilityAdapter() {
		if (qaVisualisationCapabilityItemProvider == null) {
			qaVisualisationCapabilityItemProvider = new QAVisualisationCapabilityItemProvider(this);
		}

		return qaVisualisationCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Urformen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UrformenItemProvider urformenItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Urformen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUrformenAdapter() {
		if (urformenItemProvider == null) {
			urformenItemProvider = new UrformenItemProvider(this);
		}

		return urformenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Umformen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UmformenItemProvider umformenItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Umformen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUmformenAdapter() {
		if (umformenItemProvider == null) {
			umformenItemProvider = new UmformenItemProvider(this);
		}

		return umformenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Trennen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrennenItemProvider trennenItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Trennen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrennenAdapter() {
		if (trennenItemProvider == null) {
			trennenItemProvider = new TrennenItemProvider(this);
		}

		return trennenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Beschichten} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeschichtenItemProvider beschichtenItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Beschichten}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeschichtenAdapter() {
		if (beschichtenItemProvider == null) {
			beschichtenItemProvider = new BeschichtenItemProvider(this);
		}

		return beschichtenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Stoffeigenschaften} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoffeigenschaftenItemProvider stoffeigenschaftenItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Stoffeigenschaften}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoffeigenschaftenAdapter() {
		if (stoffeigenschaftenItemProvider == null) {
			stoffeigenschaftenItemProvider = new StoffeigenschaftenItemProvider(this);
		}

		return stoffeigenschaftenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.AnEinpressen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnEinpressenItemProvider anEinpressenItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.AnEinpressen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnEinpressenAdapter() {
		if (anEinpressenItemProvider == null) {
			anEinpressenItemProvider = new AnEinpressenItemProvider(this);
		}

		return anEinpressenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Screwing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrewingItemProvider screwingItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Screwing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrewingAdapter() {
		if (screwingItemProvider == null) {
			screwingItemProvider = new ScrewingItemProvider(this);
		}

		return screwingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.ProductionCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductionCapabilityItemProvider productionCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.ProductionCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductionCapabilityAdapter() {
		if (productionCapabilityItemProvider == null) {
			productionCapabilityItemProvider = new ProductionCapabilityItemProvider(this);
		}

		return productionCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.LogisticsCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogisticsCapabilityItemProvider logisticsCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.LogisticsCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogisticsCapabilityAdapter() {
		if (logisticsCapabilityItemProvider == null) {
			logisticsCapabilityItemProvider = new LogisticsCapabilityItemProvider(this);
		}

		return logisticsCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.PickAndPlace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PickAndPlaceItemProvider pickAndPlaceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.PickAndPlace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPickAndPlaceAdapter() {
		if (pickAndPlaceItemProvider == null) {
			pickAndPlaceItemProvider = new PickAndPlaceItemProvider(this);
		}

		return pickAndPlaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Transport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransportItemProvider transportItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Transport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransportAdapter() {
		if (transportItemProvider == null) {
			transportItemProvider = new TransportItemProvider(this);
		}

		return transportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.basys.model.domain.capability.Store} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoreItemProvider storeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.basys.model.domain.capability.Store}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoreAdapter() {
		if (storeItemProvider == null) {
			storeItemProvider = new StoreItemProvider(this);
		}

		return storeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (capabilityAssertionItemProvider != null) capabilityAssertionItemProvider.dispose();
		if (capabilityRequestItemProvider != null) capabilityRequestItemProvider.dispose();
		if (capabilityItemProvider != null) capabilityItemProvider.dispose();
		if (handlingCapabilityItemProvider != null) handlingCapabilityItemProvider.dispose();
		if (manufacturingCapabilityItemProvider != null) manufacturingCapabilityItemProvider.dispose();
		if (fügenItemProvider != null) fügenItemProvider.dispose();
		if (pressingItemProvider != null) pressingItemProvider.dispose();
		if (urformenItemProvider != null) urformenItemProvider.dispose();
		if (umformenItemProvider != null) umformenItemProvider.dispose();
		if (trennenItemProvider != null) trennenItemProvider.dispose();
		if (beschichtenItemProvider != null) beschichtenItemProvider.dispose();
		if (stoffeigenschaftenItemProvider != null) stoffeigenschaftenItemProvider.dispose();
		if (anEinpressenItemProvider != null) anEinpressenItemProvider.dispose();
		if (screwingItemProvider != null) screwingItemProvider.dispose();
		if (productionCapabilityItemProvider != null) productionCapabilityItemProvider.dispose();
		if (logisticsCapabilityItemProvider != null) logisticsCapabilityItemProvider.dispose();
		if (pickAndPlaceItemProvider != null) pickAndPlaceItemProvider.dispose();
		if (transportItemProvider != null) transportItemProvider.dispose();
		if (storeItemProvider != null) storeItemProvider.dispose();
		if (qoSCapabilityItemProvider != null) qoSCapabilityItemProvider.dispose();
		if (inspectItemProvider != null) inspectItemProvider.dispose();
		if (workerAssistenceCapabilityItemProvider != null) workerAssistenceCapabilityItemProvider.dispose();
		if (interactionCapabilityItemProvider != null) interactionCapabilityItemProvider.dispose();
		if (confirmationCapabilityItemProvider != null) confirmationCapabilityItemProvider.dispose();
		if (switchConfirmationCapabilityItemProvider != null) switchConfirmationCapabilityItemProvider.dispose();
		if (generalCapabilityItemProvider != null) generalCapabilityItemProvider.dispose();
		if (moveToLocationItemProvider != null) moveToLocationItemProvider.dispose();
		if (projectPathItemProvider != null) projectPathItemProvider.dispose();
		if (projectETAItemProvider != null) projectETAItemProvider.dispose();
		if (visualisationCapabilityItemProvider != null) visualisationCapabilityItemProvider.dispose();
		if (qaVisualisationCapabilityItemProvider != null) qaVisualisationCapabilityItemProvider.dispose();
	}

}
